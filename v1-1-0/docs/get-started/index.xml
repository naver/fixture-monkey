<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Requirements</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/requirements/</guid><description>ðŸ’¡ Fixture Monkey is designed for test environments. It is not recommended for production use. Prerequisites # JDK 1.8 or higher (Or Kotlin 1.8 or higher) JUnit 5 platform jqwik 1.7.3 Dependencies # Dependency Description fixture-monkey Core library fixture-monkey-starter Starter dependency for fixture monkey fixture-monkey-kotlin Kotlin support fixture-monkey-starter-kotlin Starter dependency for fixture monkey kotlin fixture-monkey-starter is a starter dependency that comes with pre-configured dependencies such as fixture-monkey-jakarta-validation to help you get started using Fixture Monkey.</description></item><item><title>Creating objects</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/creating-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/creating-objects/</guid><description>Fixture Monkey works in both Java and Kotlin. We have a separate &amp;lsquo;Getting Started&amp;rsquo; page for each environment you can use: Java, Java without Lombok, and Kotlin.
This page explains the Java environment. Please refer to the appropriate page for your environment.
Creating test objects with Fixture Monkey is remarkably simple. Here&amp;rsquo;s how you can use it:
@Test void test() { // given FixtureMonkey fixtureMonkey = FixtureMonkey.builder() .objectIntrospector(ConstructorPropertiesArbitraryIntrospector.INSTANCE) .build(); // when Product actual = fixtureMonkey.</description></item><item><title>Creating objects without Lombok</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/creating-objects-without-lombok/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/creating-objects-without-lombok/</guid><description>ðŸ’¡ If you're using Lombok in your project, feel free to move on to the next page. Creating test objects with Fixture Monkey is remarkably simple, even without Lombok. Here&amp;rsquo;s how you can use it:
@Test void test() { // given FixtureMonkey fixtureMonkey = FixtureMonkey.create(); // when Product actual = fixtureMonkey.giveMeOne(Product.class); // then then(actual).isNotNull(); } When you run this code, Fixture Monkey will generate a Product instance with random values.</description></item><item><title>Creating objects in Kotlin</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/creating-objects-in-kotlin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/creating-objects-in-kotlin/</guid><description>Fixture Monkey helps you create test objects for your Kotlin classes easily. For example, suppose you have a Kotlin data class:
data class Product ( val id: Long, val productName: String, val price: Long, val options: List&amp;lt;String&amp;gt;, val createdAt: Instant, val productType: ProductType, val merchantInfo: Map&amp;lt;Int, String&amp;gt; ) With Fixture Monkey, you can create test instances of this class with just one line of code:
val product: Product = fixtureMonkey.giveMeOne() The generated object will contain random values that make sense for each field type.</description></item><item><title>Adding Bean Validation</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/adding-bean-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/adding-bean-validation/</guid><description>Sometimes, you might want to create a valid test object that adheres to the constraints specified by the Bean Validation annotations on your class. Fixture Monkey makes this easy with support for jakarta.validation.constraints and javax.validation.constraints packages.
For example, consider a Product class with validation constraints:
@Value public class Product { @Min(1) long id; @NotBlank String productName; @Max(100000) long price; @Size(min = 3) List&amp;lt;@NotBlank String&amp;gt; options; @Past Instant createdAt; } To generate objects that satisfy these constraints, first add the appropriate dependency:</description></item><item><title>Customizing objects</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/customizing-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/customizing-objects/</guid><description>Fixture Monkey allows you to customize test objects to match your specific test requirements. Let&amp;rsquo;s see how it works with a real-world example.
Why Customize Test Objects? # Suppose you&amp;rsquo;re testing a discount service that applies a 10% discount only to products priced over 1000. You need to test both scenarios:
Products that should get a discount (price &amp;gt; 1000) Products that shouldn&amp;rsquo;t get a discount (price â‰¤ 1000) Without Fixture Monkey, you might write code like this:</description></item><item><title>Tips for Beginners</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/get-started/tips/</guid><description>Essential Tips for Using Fixture Monkey # 1. Use Type-Safe Methods # Prefer type-safe methods over string-based ones Example: // Instead of .set(&amp;quot;price&amp;quot;, 1000L) // Use .set(javaGetter(Product::getPrice), 1000L) 2. Use Meaningful Test Data # Use values that make sense in your test context Avoid using arbitrary values like &amp;ldquo;test&amp;rdquo; or &amp;ldquo;123&amp;rdquo; Consider business rules and constraints when setting values Benefits: Makes tests more readable and self-documenting Helps identify test failures more quickly Makes it easier to understand test scenarios Reduces the need for additional comments Example: // Use meaningful values Product product = fixtureMonkey.</description></item></channel></rss>