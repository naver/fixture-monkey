<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Customizing Objects on</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/</link><description>Recent content in Customizing Objects on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/index.xml" rel="self" type="application/rss+xml"/><item><title>Quick Start Guide</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/quick-start-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/quick-start-guide/</guid><description>What You&amp;rsquo;ll Learn # Core methods for customizing test objects with Fixture Monkey Basic approaches to customize simple and complex objects Solutions to the most common problems beginners face 5-Minute Quick Start # This section covers only the essential information needed to get started with Fixture Monkey.
4 Key Methods You Must Know # If you&amp;rsquo;re short on time, here&amp;rsquo;s what you need to know right now:
Java Kotlin // 1.</description></item><item><title>Path expressions</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/path-expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/path-expressions/</guid><description>What you will learn in this document # How to select specific fields or properties of a test object How to reference specific parts of an object using string expressions How to access properties in various structures like nested objects, arrays, and lists Introduction to Path Expressions # When writing tests, you often need to modify specific fields of your test objects. Path expressions in Fixture Monkey are like GPS coordinates that help you precisely locate and modify any part of your test object.</description></item><item><title>Customization APIs</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/apis/</guid><description>What you will learn in this document # How to easily create test data How to generate objects with desired values How to apply these customizations in real testing scenarios Before you start # This document introduces various ways to create test data easily. Here are some common scenarios where you can use Fixture Monkey APIs:
When you need member data of a specific age range for registration tests When you need a shopping cart with multiple products for order tests When you need orders above a certain amount for payment tests Useful Terms to Know # Sampling: The process of actually creating test data.</description></item><item><title>Creating Random Test Data with Conditions</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/arbitrary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/arbitrary/</guid><description>What you will learn in this document # How to create test data with random but controlled values How to set ranges, patterns, and limits for your test data When and why to use random values instead of fixed values Introduction to Random Test Data # Sometimes in testing, using fixed values isn&amp;rsquo;t enough. You might want:
A range of valid inputs rather than a single value Different test data each time the test runs Random but realistic data that follows business rules For example, when testing:</description></item><item><title>Testing with Interfaces</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/interface/</guid><description>What You&amp;rsquo;ll Learn in This Document # How to generate test data for interfaces How to specify which implementation to use How to customize attributes of interface implementations How to choose between different interface testing approaches The Importance of Interface Testing # In this section, you&amp;rsquo;ll learn why interfaces are crucial in software development and why testing them is valuable.
Interfaces play a vital role in modern software development for several important reasons:</description></item><item><title>InnerSpec</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/innerspec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/customizing-objects/innerspec/</guid><description>What you will learn in this document # How to customize complex object structures more granularly How to effectively handle Map type properties How to create reusable customization specifications Introduction to InnerSpec # In this section, you&amp;rsquo;ll learn the basics of InnerSpec and why it&amp;rsquo;s useful for customizing complex objects.
If you&amp;rsquo;ve learned the basic property modification methods in previous documents, now it&amp;rsquo;s time to learn how to handle more complex object structures.</description></item></channel></rss>