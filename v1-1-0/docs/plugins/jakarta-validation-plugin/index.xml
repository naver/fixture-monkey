<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jakarta Validation Plugin on</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/plugins/jakarta-validation-plugin/</link><description>Recent content in Jakarta Validation Plugin on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0/docs/plugins/jakarta-validation-plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>Features</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/plugins/jakarta-validation-plugin/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/plugins/jakarta-validation-plugin/features/</guid><description>Fixture monkey supports generating valid data based on Jakarta Bean Validation 3.0 annotations with the Fixture Monkey Jakarta Validation Plugin.
ðŸ’¡ Javax Bean Validation is also supported with the Fixture Monkey Javax Validation Plugin Dependencies # Gradle # testImplementation(&amp;quot;com.navercorp.fixturemonkey:fixture-monkey-jakarta-validation:1.1.14&amp;quot;) Maven # &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.navercorp.fixturemonkey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fixture-monkey-jakarta-validation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.14&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; The jakarta validation API and the Hibernate validator are already provided as part of the dependency.
Plugin # Java Kotlin FixtureMonkey fixtureMonkey = FixtureMonkey.</description></item><item><title>Bean Validation</title><link>https://naver.github.io/fixture-monkey/v1-1-0/docs/plugins/jakarta-validation-plugin/bean-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0/docs/plugins/jakarta-validation-plugin/bean-validation/</guid><description>Generating valid data # Using the Jakarta Validation plugin, we can generate valid data based on Jakarta Bean validation annotations on properties.
For example, there can be a Product class annotated as follows:
@Value public class Product { @Min(1) long id; @NotBlank String productName; @Max(100000) long price; @Size(min = 3) List&amp;lt;@NotBlank String&amp;gt; options; @Past Instant createdAt; } An instance of the Product class that is compliant with the annotations can be created in the following manner:</description></item></channel></rss>