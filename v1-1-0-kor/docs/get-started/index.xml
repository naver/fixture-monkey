<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>시작하기 on</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/</link><description>Recent content in 시작하기 on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/index.xml" rel="self" type="application/rss+xml"/><item><title>요구사항</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/requirements/</guid><description>💡 Fixture Monkey 는 테스트 환경용으로 설계되었습니다. 운영 코드에는 포함하지 않는 것을 권장합니다. 사용 환경 # JDK 1.8 이상 (또는 Kotlin 1.8 이상) JUnit 5 platform jqwik 1.7.3 종속성 # 종속성 설명 fixture-monkey fixture monkey 코어 라이브러리 fixture-monkey-starter fixture monkey 시작 패키지 fixture-monkey-kotlin Kotlin 지원 fixture-monkey-starter-kotlin Kotlin 환경을 위한 시작 패키지 fixture-monkey-starter 는 Fixture Monkey 를 시작하는 데 도움이 되도록 fixture-monkey-jakarta-validation과 같은 플러그인들이 함께 제공되는 스타터 패키지입니다.
Kotlin 환경에서는 fixture-monkey-starter-kotlin 을 대신 사용할 수 있습니다.</description></item><item><title>테스트 객체 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-objects/</guid><description>Fixture Monkey 는 Java 와 Kotlin 모두에서 사용할 수 있습니다. 각 환경에 맞는 &amp;lsquo;시작하기&amp;rsquo; 페이지가 있습니다: Java, Java without Lombok, Kotlin.
이 페이지는 Java 환경을 기준으로 설명합니다. 사용 중인 환경에 맞는 페이지를 참고해주세요.
Fixture Monkey를 사용하면 테스트 객체를 아주 쉽게 생성할 수 있습니다. 다음과 같이 사용해보세요:
@Test void test() { // given FixtureMonkey fixtureMonkey = FixtureMonkey.builder() .objectIntrospector(ConstructorPropertiesArbitraryIntrospector.INSTANCE) .build(); // when Product actual = fixtureMonkey.giveMeOne(Product.class); // then then(actual).isNotNull(); } 이 코드를 실행하면, Fixture Monkey는 임의의 값을 가진 Product 인스턴스를 생성합니다.</description></item><item><title>Lombok 없이 테스트 객체 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-objects-without-lombok/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-objects-without-lombok/</guid><description>💡 만약 프로젝트에서 Lombok 을 사용하고 있다면 다음 페이지로 넘어가주세요. Fixture Monkey를 사용하면 Lombok이 없어도 테스트 객체를 아주 쉽게 생성할 수 있습니다. 다음과 같이 사용해보세요:
@Test void test() { // given FixtureMonkey fixtureMonkey = FixtureMonkey.create(); // when Product actual = fixtureMonkey.giveMeOne(Product.class); // then then(actual).isNotNull(); } 이 코드를 실행하면, Fixture Monkey는 임의의 값을 가진 Product 인스턴스를 생성합니다. 아래는 예시일 뿐이며, 실제로는 매번 다른 임의의 값들이 생성됩니다:
Product( id=42, productName=&amp;quot;product-value-1&amp;quot;, price=1000, options=[&amp;quot;option1&amp;quot;, &amp;quot;option2&amp;quot;], createdAt=2024-03-21T10:15:30Z, productType=ELECTRONICS, merchantInfo={1=&amp;quot;merchant1&amp;quot;, 2=&amp;quot;merchant2&amp;quot;} ) 먼저, 테스트 픽스처를 쉽게 만들 수 있는 FixtureMonkey 인스턴스를 생성합니다.</description></item><item><title>Kotlin 환경에서 테스트 객체 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-objects-in-kotlin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-objects-in-kotlin/</guid><description>Fixture Monkey를 사용하면 Kotlin 클래스의 테스트 객체를 쉽게 생성할 수 있습니다. 예를 들어, 다음과 같은 Kotlin 데이터 클래스가 있다고 해보겠습니다:
data class Product ( val id: Long, val productName: String, val price: Long, val options: List&amp;lt;String&amp;gt;, val createdAt: Instant, val productType: ProductType, val merchantInfo: Map&amp;lt;Int, String&amp;gt; ) Fixture Monkey를 사용하면 이 클래스의 테스트 인스턴스를 단 한 줄의 코드로 생성할 수 있습니다:
val product: Product = fixtureMonkey.giveMeOne() 생성된 객체는 각 필드 타입에 맞는 적절한 임의의 값을 포함하게 됩니다.</description></item><item><title>Bean 유효성 검사 추가하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/adding-bean-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/adding-bean-validation/</guid><description>때로는 클래스의 Bean 유효성 검사 어노테이션에 지정된 제약조건을 준수하는 유효한 테스트 객체를 생성하고 싶을 수 있습니다. Fixture Monkey는 jakarta.validation.constraints 및 javax.validation.constraints 패키지의 제약 어노테이션을 지원하여 이를 쉽게 만들어줍니다.
예를 들어, 다음과 같이 유효성 검사 제약조건이 있는 Product 클래스를 보겠습니다:
@Value public class Product { @Min(1) long id; @NotBlank String productName; @Max(100000) long price; @Size(min = 3) List&amp;lt;@NotBlank String&amp;gt; options; @Past Instant createdAt; } 이러한 제약조건을 만족하는 객체를 생성하려면, 먼저 적절한 의존성을 추가해야 합니다:</description></item><item><title>사용자 정의 객체 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/customizing-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/customizing-objects/</guid><description>Fixture Monkey를 사용하면 테스트 요구사항에 맞게 테스트 객체를 커스터마이즈할 수 있습니다. 실제 예제를 통해 살펴보겠습니다.
왜 테스트 객체를 커스터마이즈해야 할까요? # 예를 들어, 1000원 이상인 상품에만 10% 할인을 적용하는 서비스를 테스트한다고 가정해봅시다. 두 가지 시나리오를 테스트해야 합니다:
할인이 적용되어야 하는 상품 (가격 &amp;gt; 1000원) 할인이 적용되지 않아야 하는 상품 (가격 ≤ 1000원) Fixture Monkey를 사용하지 않는다면 다음과 같이 코드를 작성해야 합니다:
// Fixture Monkey 없이 Product expensiveProduct = new Product(1, &amp;quot;고가 상품&amp;quot;, 2000, .</description></item><item><title>초보자를 위한 팁</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/tips/</guid><description>Fixture Monkey 사용을 위한 필수 팁 # 1. 타입 안전한 메서드 사용하기 # 문자열 기반 메서드보다 타입 안전한 메서드를 선호하세요 예시: // 이렇게 하지 말고 .set(&amp;quot;price&amp;quot;, 1000L) // 이렇게 사용하세요 .set(javaGetter(Product::getPrice), 1000L) 2. 의미 있는 테스트 데이터 사용하기 # 테스트 맥락에서 의미가 있는 값을 사용하세요 &amp;ldquo;test&amp;quot;나 &amp;ldquo;123&amp;quot;과 같은 임의의 값을 피하세요 비즈니스 규칙과 제약 조건을 고려하여 값을 설정하세요 장점: 테스트가 더 읽기 쉽고 자체 문서화됩니다 테스트 실패를 더 빠르게 파악할 수 있습니다 테스트 시나리오를 이해하기 쉬워집니다 추가 주석이 필요 없어집니다 예시: // 의미 있는 값 사용 Product product = fixtureMonkey.</description></item></channel></rss>