<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>시작하기 on</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/</link><description>Recent content in 시작하기 on</description><generator>Hugo</generator><language>v1-1-0-kor</language><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/index.xml" rel="self" type="application/rss+xml"/><item><title>요구사항</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/requirements/</guid><description>&lt;div class="alert alert-doks d-flex" role="alert">
 &lt;div class="flex-shrink-1 alert-icon">💡 &lt;/div>
 
 &lt;div class="w-100">Fixture Monkey 는 테스트 환경용으로 설계되었습니다. 운영 코드에는 포함하지 않는 것을 권장합니다. &lt;/div>
 
&lt;/div>

&lt;h2 id="사용-환경">사용 환경 &lt;a href="#%ec%82%ac%ec%9a%a9-%ed%99%98%ea%b2%bd" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>JDK 1.8 이상 (또는 Kotlin 1.8 이상)&lt;/li>
&lt;li>JUnit 5 platform&lt;/li>
&lt;li>jqwik 1.7.3&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="종속성">종속성 &lt;a href="#%ec%a2%85%ec%86%8d%ec%84%b1" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>종속성&lt;/th>
 &lt;th>설명&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>fixture-monkey&lt;/td>
 &lt;td>fixture monkey 코어 라이브러리&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fixture-monkey-starter&lt;/td>
 &lt;td>fixture monkey 시작 패키지&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fixture-monkey-kotlin&lt;/td>
 &lt;td>Kotlin 지원&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fixture-monkey-starter-kotlin&lt;/td>
 &lt;td>Kotlin 환경을 위한 시작 패키지&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>fixture-monkey-starter&lt;/strong> 는 Fixture Monkey 를 시작하는 데 도움이 되도록 fixture-monkey-jakarta-validation과 같은 플러그인들이 함께 제공되는 스타터
패키지입니다.&lt;/p>
&lt;p>Kotlin 환경에서는 &lt;strong>fixture-monkey-starter-kotlin&lt;/strong> 을 대신 사용할 수 있습니다.&lt;/p></description></item><item><title>테스트 객체 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-test-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-test-objects/</guid><description>&lt;blockquote>
&lt;p>Fixture Monkey 는 Java 와 Kotlin 모두에서 사용할 수 있습니다.
각 환경에 맞는 &amp;lsquo;시작하기&amp;rsquo; 페이지가 있습니다: &lt;a href="../creating-test-objects">Java&lt;/a>, &lt;a href="../creating-test-objects-without-lombok">Java without Lombok&lt;/a>, &lt;a href="../creating-objects-in-kotlin">Kotlin&lt;/a>.&lt;/p>
&lt;p>이 페이지는 Java 환경을 기준으로 설명합니다. 사용 중인 환경에 맞는 페이지를 참고해주세요.&lt;/p>&lt;/blockquote>
&lt;p>아래처럼 Product 클래스를 테스트하기 위해 테스트 픽스처가 필요한 시나리오를 생각해보세요.&lt;/p>
&lt;div class="alert alert-doks d-flex" role="alert">
 &lt;div class="flex-shrink-1 alert-icon">💡 &lt;/div>
 
 &lt;div class="w-100">lombok.anyConstructor.addConstructorProperties=true 가 lombok.config 파일에 추가되어 있어야 합니다. &lt;/div>
 
&lt;/div>

&lt;pre>&lt;code class="language-java">@Value
public class Product {
 long id;

 String productName;

 long price;

 List&amp;lt;String&amp;gt; options;

 Instant createdAt;

 ProductType productType;

 Map&amp;lt;Integer, String&amp;gt; merchantInfo;
}
&lt;/code>&lt;/pre>
&lt;p>(Lombok 의 어노테이션인 &lt;code>@Value&lt;/code> 는 불변 클래스를 만들기 위해 사용됩니다. 만약 Lombok 을 사용하지 않는다면, &lt;a href="../creating-test-objects-without-lombok">Lombok 없이 테스트 객체 생성하기&lt;/a> 으로 이동하세요.)&lt;/p></description></item><item><title>Lombok 없이 테스트 객체 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-test-objects-without-lombok/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-test-objects-without-lombok/</guid><description>&lt;div class="alert alert-doks d-flex" role="alert">
 &lt;div class="flex-shrink-1 alert-icon">💡 &lt;/div>
 
 &lt;div class="w-100">만약 프로젝트에서 Lombok 을 사용하고 있다면 다음 페이지로 넘어가주세요. &lt;/div>
 
&lt;/div>

&lt;p>아래처럼 Product 클래스를 테스트하기 위해 테스트 픽스처가 필요한 시나리오를 생각해보세요.&lt;/p>
&lt;pre>&lt;code class="language-java">public class Product {
 private long id;

 private String productName;

 private long price;

 private List&amp;lt;String&amp;gt; options;

 private Instant createdAt;

 private ProductType productType;

 private Map&amp;lt;Integer, String&amp;gt; merchantInfo;

 public Product() {
 }

 public void setId(long id) {
 this.id = id;
 }

 public void setProductName(String productName) {
 this.productName = productName;
 }

 public void setPrice(long price) {
 this.price = price;
 }

 public void setOptions(List&amp;lt;String&amp;gt; options) {
 this.options = options;
 }

 public void setCreatedAt(Instant createdAt) {
 this.createdAt = createdAt;
 }

 public void setProductType(ProductType productType) {
 this.productType = productType;
 }

 public void setMerchantInfo(Map&amp;lt;Integer, String&amp;gt; merchantInfo) {
 this.merchantInfo = merchantInfo;
 }
}
&lt;/code>&lt;/pre>
&lt;p>Fixture Monkey 를 사용하면, 단 몇 줄의 코드만으로도 Product 인스턴스를 생성할 수 있습니다.&lt;/p></description></item><item><title>Bean 유효성 검사 추가하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/adding-bean-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/adding-bean-validation/</guid><description>&lt;p>때로는 클래스의 Bean 유효성 검사 어노테이션에 지정된 제약조건을 준수하는 유효한 테스트 객체를 생성하고 싶을 수 있습니다.&lt;/p>
&lt;p>Fixture Monkey는 &lt;code>jakarta.validation.constraints&lt;/code> 및 &lt;code>javax.validation.constraints&lt;/code> 패키지의 제약 어노테이션을 지원합니다.&lt;/p>
&lt;p>이 기능을 사용하려면 다음과 같이 프로젝트에 &lt;code>fixture-monkey-jakarta-validation&lt;/code> 종속성을 추가해야 합니다.
&lt;br/>&lt;/p>
&lt;p>javax.validation.constraints를 사용하는 경우 &lt;code>fixture-monkey-javax-validation&lt;/code>을 추가해야 합니다.&lt;/p>
&lt;h5 id="gradle">Gradle &lt;a href="#gradle" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h5>
&lt;pre>&lt;code class="language-groovy">testImplementation(&amp;quot;com.navercorp.fixturemonkey:fixture-monkey-jakarta-validation:1.1.10&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h5 id="maven">Maven &lt;a href="#maven" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h5>
&lt;pre>&lt;code class="language-xml">&amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;com.navercorp.fixturemonkey&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;fixture-monkey-jakarta-validation&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;1.1.10&amp;lt;/version&amp;gt;
 &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Bean 유효성 검사 어노테이션을 기반으로 객체를 생성하려면 아래 그림과 같이 FixtureMonkey에 &lt;code>JakartaValidationPlugin&lt;/code> (&lt;code>javax.validation.constraints&lt;/code>를 사용하는 경우 &lt;code>JavaxValidationPlugin&lt;/code>) 옵션을 추가해야 합니다.
&lt;br />&lt;/p></description></item><item><title>사용자 정의 객체 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/customizing-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/customizing-objects/</guid><description>&lt;p>특정 단위 테스트에 맞게 테스트 픽스처를 조정해야할 수 있습니다.
이런 경우에는 Fixture Monkey 를 사용하여 빌더를 생성하고 특정 명세를 추가할 수 있습니다.&lt;/p>
&lt;pre>&lt;code class="language-java">@Value
public class Product {
 long id;

 String productName;

 long price;

 List&amp;lt;String&amp;gt; options;

 Instant createdAt;
}
&lt;/code>&lt;/pre>
&lt;p>예를 들면, 특정 테스트에서 id 가 1,000 인 Product 인스턴스가 필요할 수 있습니다.&lt;/p>
&lt;p>이를 위해 &lt;code>giveMeBuilder&lt;/code> 메서드를 사용하여 픽스처 몽키에서 타입 빌더를 가져올 수 있습니다.
빌더를 사용하면 추가 메서드 호출을 연결하여 픽스처를 사용자 정의할 수 있습니다.
위 예시의 경우에는 &lt;code>set()&lt;/code> 함수를 사용하여 id를 1,000으로 설정하고, &lt;code>sample()&lt;/code>을 사용하여 인스턴스를 생성해줄 수 있습니다.&lt;/p></description></item><item><title>Kotlin 환경에서 테스트 객체 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-objects-in-kotlin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/get-started/creating-objects-in-kotlin/</guid><description>&lt;p>Fixture Monkey 는 Kotlin 으로 작성한 클래스 생성을 지원합니다.&lt;/p>
&lt;p>먼저 &lt;code>fixture-monkey-starter-kotlin&lt;/code> 종속성을 추가했는지 확인하세요.&lt;/p>
&lt;p>그런 다음 Kotlin 플러그인을 추가하여, Fixture Monkey 의 Kotlin 지원 기능을 활성화 할 수 있습니다.&lt;/p>
&lt;pre>&lt;code class="language-kotlin">@Test
fun test() {
 val fixtureMonkey = FixtureMonkey.builder()
 .plugin(KotlinPlugin())
 .build()
}
&lt;/code>&lt;/pre>
&lt;p>Kotlin 플러그인은 기본 &lt;code>ObjectIntrospector&lt;/code> 를 &lt;code>PrimaryConstructorArbitraryIntrospector&lt;/code> 로 변경합니다.
이는 Kotlin 클래스의 기본 생성자를 사용하여 객체를 생성합니다.&lt;/p>
&lt;p>다음과 같은 Kotlin 클래스가 있다고 가정해보겠습니다.&lt;/p>
&lt;pre>&lt;code class="language-kotlin">data class Product (
 val id: Long,

 val productName: String,

 val price: Long,

 val options: List&amp;lt;String&amp;gt;,

 val createdAt: Instant,

 val productType: ProductType,

 val merchantInfo: Map&amp;lt;Integer, String&amp;gt;
)
&lt;/code>&lt;/pre>
&lt;p>Java 에서 했던 것처럼 Kotlin 클래스를 생성할 수 있습니다.&lt;/p></description></item></channel></rss>