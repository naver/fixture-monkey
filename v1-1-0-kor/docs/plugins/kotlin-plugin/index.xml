<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin 플러그인 on</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/</link><description>Recent content in Kotlin 플러그인 on</description><generator>Hugo</generator><language>v1-1-0-kor</language><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>기능</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/features/</guid><description>&lt;p>Kotlin의 특성인 간결성, 안전성, 실용성을 최대한 활용할 수 있도록 Fixture Monkey 는 Kotlin 플러그인을 제공합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>PrimaryConstructorArbitraryIntrospector&lt;/code> 를 기본 Introspector 로 적용하여 Kotlin 클래스를 주 생성자로 생성&lt;/li>
&lt;li>Fixture Monkey 의 Kotlin 확장 함수 제공&lt;/li>
&lt;li>Kotlin DSL 표현식 및 instantiateBy DSL 제공&lt;/li>
&lt;/ul>
&lt;h2 id="종속성">종속성 &lt;a href="#%ec%a2%85%ec%86%8d%ec%84%b1" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h2>
&lt;h5 id="fixture-monkey-kotlin">fixture-monkey-kotlin &lt;a href="#fixture-monkey-kotlin" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h5>
&lt;h4 id="gradle">Gradle &lt;a href="#gradle" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h4>
&lt;pre>&lt;code class="language-groovy">testImplementation(&amp;quot;com.navercorp.fixturemonkey:fixture-monkey-kotlin:1.1.10&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h4 id="maven">Maven &lt;a href="#maven" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h4>
&lt;pre>&lt;code class="language-xml">&amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;com.navercorp.fixturemonkey&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;fixture-monkey-kotlin&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;1.1.10&amp;lt;/version&amp;gt;
 &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code>&lt;/pre>
&lt;h5 id="fixture-monkey-starter-kotlin">fixture-monkey-starter-kotlin &lt;a href="#fixture-monkey-starter-kotlin" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h5>
&lt;p>Kotlin 환경에서 Fixture Monkey 를 사용하는 것을 돕기 위해 &lt;strong>fixture-monkey-starter&lt;/strong> 나 &lt;strong>fixture-monkey-jakarta-validation&lt;/strong> 와 같은 사전 구성된 종속성들로 구성되어 있는 스타터 패키지 &lt;strong>fixture-monkey-kotlin-starter&lt;/strong> 를 제공합니다.&lt;/p></description></item><item><title>Kotlin 지원 Introspector</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/introspectors-for-kotlin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/introspectors-for-kotlin/</guid><description>&lt;p>Fixture Monkey 는 Kotlin 클래스를 생성하기 위한 추가적인 introspector 들을 제공합니다.&lt;/p>
&lt;h2 id="primaryconstructorarbitraryintrospector">PrimaryConstructorArbitraryIntrospector &lt;a href="#primaryconstructorarbitraryintrospector" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h2>
&lt;p>&lt;code>PrimaryConstructorArbitraryIntrospector&lt;/code> 는 코틀린 플러그인이 추가되면 자동으로 기본 introspector 로 설정됩니다.
이 introspector 는 주 생성자를 기반으로 Kotlin 클래스를 생성합니다.&lt;/p>
&lt;p>&lt;code>PrimaryConstructorArbitraryIntrospector&lt;/code>를 사용하면 &lt;code>코틀린 생성자의 파라미터&lt;/code> 정보만 생성합니다. &lt;code>ArbitraryBuilder&lt;/code> API를 사용하면 &lt;code>코틀린 생성자의 파라미터&lt;/code>만 변경할 수 있습니다.&lt;/p>
&lt;p>&lt;code>pushArbitraryIntrospector&lt;/code> 옵션을 사용해서 &lt;code>PrimaryConstructorArbitraryIntrospector&lt;/code>를 사용하지 않게 되면 &lt;code>코틀린 생성자의 파라미터&lt;/code>는 물론 &lt;code>필드&lt;/code>와 &lt;code>게터&lt;/code> 정보를 같이 생성합니다.
따라서 부모 클래스의 &lt;code>필드&lt;/code>, &lt;code>게터&lt;/code> 정보도 모두 가지고 있습니다. 이때는 &lt;code>ArbitraryBuilder&lt;/code> API를 사용하면 가지고 있는 정보를 모두 변경 가능합니다.&lt;/p></description></item><item><title>Kotlin DSL 표현식</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/kotlin-exp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/kotlin-exp/</guid><description>&lt;p>Fixture Monkey 는 코틀린의 DSL 기능을 이용해 표현식과 함께 타입 안정성을 보장합니다.
표준 &lt;a href="../../../customizing-objects/expressions">자바 문자열 표현식&lt;/a> 대신 코틀린 표현식을 이용하는 방법을 알아보겠습니다.&lt;/p>
&lt;h3 id="프로퍼티-참조">프로퍼티 참조 &lt;a href="#%ed%94%84%eb%a1%9c%ed%8d%bc%ed%8b%b0-%ec%b0%b8%ec%a1%b0" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h3>
&lt;p>앞서 설명한 것과 비슷한 객체 구조를 자바와 코틀린으로 모두 작성했다고 가정해보겠습니다.&lt;/p>
&lt;pre>&lt;code class="language-java">@Value
public class JavaClass {
 String field;

 List&amp;lt;String&amp;gt; list;

 Nested nestedObject;

 List&amp;lt;Nested&amp;gt; nestedObjectList;

 @Value
 public static class Nested {
 String nestedField;
 }
}
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-kotlin">data class KotlinClass(
 val field: String,

 val list: List&amp;lt;String&amp;gt;,

 val nestedObject: Nested,

 val nestedObjectList: List&amp;lt;Nested&amp;gt;
) {
 data class Nested(
 val nestedField: String
 )
}
&lt;/code>&lt;/pre>
&lt;p>코틀린 표현식을 사용해 프로퍼티를 참조하기 위해서는 일반 &lt;a href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/customizing-objects/apis/">Fixture Customization APIs&lt;/a> 에 &lt;code>Exp&lt;/code> 나 &lt;code>ExpGetter&lt;/code> 접미사를 사용합니다.&lt;/p></description></item></channel></rss>