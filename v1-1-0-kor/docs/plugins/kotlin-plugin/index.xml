<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin 플러그인 on</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/</link><description>Recent content in Kotlin 플러그인 on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>기능</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/features/</guid><description>Kotlin의 특성인 간결성, 안전성, 실용성을 최대한 활용할 수 있도록 Fixture Monkey 는 Kotlin 플러그인을 제공합니다.
PrimaryConstructorArbitraryIntrospector 를 기본 Introspector 로 적용하여 Kotlin 클래스를 주 생성자로 생성 Fixture Monkey 의 Kotlin 확장 함수 제공 Kotlin DSL 표현식 및 instantiateBy DSL 제공 종속성 # fixture-monkey-kotlin # Gradle # testImplementation(&amp;quot;com.navercorp.fixturemonkey:fixture-monkey-kotlin:1.1.12&amp;quot;) Maven # &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.navercorp.fixturemonkey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fixture-monkey-kotlin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.12&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; fixture-monkey-starter-kotlin # Kotlin 환경에서 Fixture Monkey 를 사용하는 것을 돕기 위해 fixture-monkey-starter 나 fixture-monkey-jakarta-validation 와 같은 사전 구성된 종속성들로 구성되어 있는 스타터 패키지 fixture-monkey-starter-kotlin 를 제공합니다.</description></item><item><title>Kotlin 지원 Introspector</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/introspectors-for-kotlin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/introspectors-for-kotlin/</guid><description>Fixture Monkey 는 Kotlin 클래스를 생성하기 위한 추가적인 introspector 들을 제공합니다.
PrimaryConstructorArbitraryIntrospector # PrimaryConstructorArbitraryIntrospector 는 코틀린 플러그인이 추가되면 자동으로 기본 introspector 로 설정됩니다. 이 introspector 는 주 생성자를 기반으로 Kotlin 클래스를 생성합니다.
PrimaryConstructorArbitraryIntrospector를 사용하면 코틀린 생성자의 파라미터 정보만 생성합니다. ArbitraryBuilder API를 사용하면 코틀린 생성자의 파라미터만 변경할 수 있습니다.
pushArbitraryIntrospector 옵션을 사용해서 PrimaryConstructorArbitraryIntrospector를 사용하지 않게 되면 코틀린 생성자의 파라미터는 물론 필드와 게터 정보를 같이 생성합니다. 따라서 부모 클래스의 필드, 게터 정보도 모두 가지고 있습니다.</description></item><item><title>Kotlin DSL 표현식</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/kotlin-exp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotlin-plugin/kotlin-exp/</guid><description>Fixture Monkey 는 코틀린의 DSL 기능을 이용해 표현식과 함께 타입 안정성을 보장합니다. 표준 자바 문자열 표현식 대신 코틀린 표현식을 이용하는 방법을 알아보겠습니다.
프로퍼티 참조 # 앞서 설명한 것과 비슷한 객체 구조를 자바와 코틀린으로 모두 작성했다고 가정해보겠습니다.
@Value public class JavaClass { String field; List&amp;lt;String&amp;gt; list; Nested nestedObject; List&amp;lt;Nested&amp;gt; nestedObjectList; @Value public static class Nested { String nestedField; } } data class KotlinClass( val field: String, val list: List&amp;lt;String&amp;gt;, val nestedObject: Nested, val nestedObjectList: List&amp;lt;Nested&amp;gt; ) { data class Nested( val nestedField: String ) } 코틀린 표현식을 사용해 프로퍼티를 참조하기 위해서는 일반 Fixture Customization APIs 에 Exp 나 ExpGetter 접미사를 사용합니다.</description></item></channel></rss>