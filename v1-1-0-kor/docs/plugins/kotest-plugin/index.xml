<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotest 플러그인 on</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/</link><description>Recent content in Kotest 플러그인 on</description><generator>Hugo</generator><language>v1-1-0-kor</language><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>기능</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/features/</guid><description>&lt;p>Fixture Monkey에서 제공하는 Kotest 플러그인을 사용하면 더욱 향상된 테스트를 경험할 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>기본 타입의 랜덤 값을 생성하는 기본 생성기를 Jqwik에서 Kotest의 프로퍼티 생성기(&lt;code>Arb&lt;/code>)로 대체합니다. 빈(bean) 검증 어노테이션도 사용할 수 있습니다.&lt;/li>
&lt;li>&lt;code>forAll&lt;/code>, &lt;code>checkAll&lt;/code>을 포함한 Kotest의 &lt;a href="https://kotest.io/docs/proptest/property-test-functions.html">property-based 테스트&lt;/a>를 지원합니다.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-doks d-flex" role="alert">
 &lt;div class="flex-shrink-1 alert-icon">💡 &lt;/div>
 
 &lt;div class="w-100">Kotest 플러그인 추가 후 반드시 Kotest를 사용해야 하는 것은 아니며, Junit을 사용할 수 있습니다. &lt;/div>
 
&lt;/div>

&lt;h2 id="의존성">의존성 &lt;a href="#%ec%9d%98%ec%a1%b4%ec%84%b1" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h2>
&lt;h5 id="fixture-monkey-kotlin">fixture-monkey-kotlin &lt;a href="#fixture-monkey-kotlin" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h5>
&lt;h4 id="gradle">Gradle &lt;a href="#gradle" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h4>
&lt;pre>&lt;code class="language-groovy">testImplementation(&amp;quot;com.navercorp.fixturemonkey:fixture-monkey-kotest:1.1.10&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h4 id="maven">Maven &lt;a href="#maven" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h4>
&lt;pre>&lt;code class="language-xml">&amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;com.navercorp.fixturemonkey&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;fixture-monkey-kotest&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;1.1.10&amp;lt;/version&amp;gt;
 &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code>&lt;/pre>
&lt;h2 id="플러그인">플러그인 &lt;a href="#%ed%94%8c%eb%9f%ac%ea%b7%b8%ec%9d%b8" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h2>
&lt;pre>&lt;code class="language-kotlin">val fixtureMonkey = FixtureMonkey.builder()
 .plugin(KotestPlugin())
 .plugin(KotlinPlugin())
 .build()
&lt;/code>&lt;/pre></description></item><item><title>Kotest 프로퍼티 기반 테스트</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/property-based-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/property-based-testing/</guid><description>&lt;p>Fixture Monkey의 Kotest 플러그인은 &lt;a href="https://kotest.io/docs/proptest/property-test-functions.html">Kotest 프레임워크의 property-based 테스트&lt;/a>의 2가지 주요 기능인 &lt;code>forAll&lt;/code>과 &lt;code>checkAll&lt;/code>을 강화할 수 있는 기능을 제공합니다.&lt;/p>
&lt;p>이 기능을 활성화하려면 KotestPlugin과 KotlinPlugin을 추가해야 합니다.&lt;/p>
&lt;pre>&lt;code class="language-kotlin">val fixtureMonkey: FixtureMonkey = Fixture
 .plugin(KotestPlugin())
 .plugin(KotlinPlugin())
 .build()
&lt;/code>&lt;/pre>
&lt;h2 id="forall">ForAll &lt;a href="#forall" class="anchor" aria-hidden="true">#&lt;/a>&lt;/h2>
&lt;p>Kotest는 &lt;code>(a, ..., n) -&amp;gt; Boolean&lt;/code> 형식의 n-arity 함수를 받아 프로퍼티를 테스트하는 &lt;code>forAll&lt;/code> 함수를 제공합니다.
모든 입력 값에 대해 함수가 true를 반환하면 테스트가 통과합니다.&lt;/p>
&lt;p>이 함수는 타입 매개변수를 받고, 이를 사용하여 Kotest가 적절한 타입의 랜덤 값을 제공하는 생성기를 찾습니다.&lt;/p></description></item></channel></rss>