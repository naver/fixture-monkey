<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotest 플러그인 on</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/</link><description>Recent content in Kotest 플러그인 on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>기능</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/features/</guid><description>Fixture Monkey에서 제공하는 Kotest 플러그인을 사용하면 더욱 향상된 테스트를 경험할 수 있습니다.
기본 타입의 랜덤 값을 생성하는 기본 생성기를 Jqwik에서 Kotest의 프로퍼티 생성기(Arb)로 대체합니다. 빈(bean) 검증 어노테이션도 사용할 수 있습니다. forAll, checkAll을 포함한 Kotest의 property-based 테스트를 지원합니다. 💡 Kotest 플러그인 추가 후 반드시 Kotest를 사용해야 하는 것은 아니며, Junit을 사용할 수 있습니다. 의존성 # fixture-monkey-kotlin # Gradle # testImplementation(&amp;quot;com.navercorp.fixturemonkey:fixture-monkey-kotest:1.1.12&amp;quot;) Maven # &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.navercorp.fixturemonkey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fixture-monkey-kotest&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.12&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 플러그인 # val fixtureMonkey = FixtureMonkey.</description></item><item><title>Kotest 프로퍼티 기반 테스트</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/property-based-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/kotest-plugin/property-based-testing/</guid><description>Fixture Monkey의 Kotest 플러그인은 Kotest 프레임워크의 property-based 테스트의 2가지 주요 기능인 forAll과 checkAll을 강화할 수 있는 기능을 제공합니다.
이 기능을 활성화하려면 KotestPlugin과 KotlinPlugin을 추가해야 합니다.
val fixtureMonkey: FixtureMonkey = Fixture .plugin(KotestPlugin()) .plugin(KotlinPlugin()) .build() ForAll # Kotest는 (a, ..., n) -&amp;gt; Boolean 형식의 n-arity 함수를 받아 프로퍼티를 테스트하는 forAll 함수를 제공합니다. 모든 입력 값에 대해 함수가 true를 반환하면 테스트가 통과합니다.
이 함수는 타입 매개변수를 받고, 이를 사용하여 Kotest가 적절한 타입의 랜덤 값을 제공하는 생성기를 찾습니다.</description></item></channel></rss>