<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interface 플러그인 on</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/interface-plugin/</link><description>Recent content in Interface 플러그인 on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/interface-plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>Features</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/interface-plugin/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/plugins/interface-plugin/features/</guid><description>인터페이스 플러그인은 Fixture Monkey에서 객체 생성 시 인터페이스와 추상 클래스의 구현을 동적으로 처리할 수 있게 해주는 강력한 도구입니다. 테스트 픽스처에서 인터페이스나 추상 클래스의 구체적인 구현을 지정해야 할 때 특히 유용합니다.
요약 # 인터페이스의 구체적인 구현 등록 추상 클래스의 구체적인 구현 등록 익명 임의 인트로스펙터 사용 옵션 (기본값: 활성화) CandidateConcretePropertyResolver를 사용한 속성 특성 기반 동적 구현 해결 지원 기본 사용법 # FixtureMonkey sut = FixtureMonkey.builder() .plugin(new InterfacePlugin() .interfaceImplements(MyInterface.class, Arrays.asList(MyInterfaceImpl1.class, MyInterfaceImpl2.class)) .abstractClassExtends(MyAbstractClass.class, Arrays.</description></item></channel></rss>