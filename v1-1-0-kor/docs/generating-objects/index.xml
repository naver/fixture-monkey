<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>객체 생성 on</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/</link><description>Recent content in 객체 생성 on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/index.xml" rel="self" type="application/rss+xml"/><item><title>FixtureMonkey</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/fixture-monkey/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/fixture-monkey/</guid><description>FixtureMonkey란? # FixtureMonkey는 테스트에 필요한 객체(테스트 픽스처)를 손쉽게 생성해주는 라이브러리의 핵심 클래스입니다. 다양한 타입의 클래스 인스턴스를 유효한 임의의 값으로 자동 생성해주는 일종의 팩토리라고 생각하면 이해하기 쉽습니다. 테스트 데이터를 준비하기 위해 복잡한 설정 코드를 일일이 작성할 필요 없이, 간단하게 테스트 객체를 만들 수 있습니다.
사용 방법 - 간단 요약 # FixtureMonkey를 사용한 일반적인 과정은 다음과 같습니다:
FixtureMonkey 인스턴스 만들기 생성 메서드를 사용해 테스트 객체 만들기 필요한 경우 테스트 요구사항에 맞게 객체 속성 조정하기 다음은 FixtureMonkey를 활용한 간단한 테스트 예제입니다:</description></item><item><title>복잡한 객체 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/generating-complex-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/generating-complex-types/</guid><description>테스트에서 복잡한 타입이 중요한 이유 # 실제 테스트를 작성할 때 다음과 같은 복잡한 객체로 작업해야 하는 경우가 많습니다:
여러 타입 파라미터를 가진 제네릭 타입 트리나 그래프 같은 자기 참조 구조 복잡한 인터페이스 계층 구조 sealed 클래스나 추상 클래스 테스트를 위해 이러한 타입의 인스턴스를 수동으로 생성하는 것은 매우 지루하고 오류가 발생하기 쉽습니다. 이런 경우 Fixture Monkey가 빛을 발합니다 - 최소한의 코드로 가장 복잡한 타입의 유효한 인스턴스까지 자동으로 생성할 수 있습니다.
Fixture Monkey가 복잡한 타입을 처리하는 방법 # Fixture Monkey는 런타임에 클래스와 인터페이스의 구조를 분석하여 관계와 제약 조건을 이해합니다.</description></item><item><title>객체 생성 방법 지정하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/instantiate-methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/instantiate-methods/</guid><description>개요: 객체 생성 방법을 직접 지정하는 이유 # 기본적으로 Fixture Monkey는 인트로스펙터(Introspector)를 통해 객체 생성 방법을 자동으로 결정합니다. 하지만 때로는 다음과 같은 이유로 특정 방법을 직접 지정해야 할 수 있습니다:
특정 생성자 사용: 클래스에 여러 생성자가 있을 때 특정 생성자를 선택하고 싶은 경우 팩토리 메서드 활용: 생성자 대신 팩토리 메서드로 객체를 생성하고 싶은 경우 테스트별 다른 초기화: 같은 클래스지만 테스트마다 다른 방식으로 초기화하고 싶은 경우 특수한 초기화 로직: 인트로스펙터로 자동 처리되지 않는 특별한 초기화가 필요한 경우 이러한 상황에서 instantiate() 메서드를 사용하면 객체 생성 방법을 세밀하게 제어할 수 있습니다.</description></item><item><title>인터페이스 타입 생성하기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/generating-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/generating-interface/</guid><description>왜 인터페이스 타입을 생성해야 하나요? # 테스트를 작성할 때 구체적인 구현체 대신 인터페이스를 사용해야 하는 경우가 많습니다:
인터페이스를 매개변수로 받는 코드를 테스트해야 할 수 있습니다 테스트 대상 시스템이 인터페이스 타입을 반환할 수 있습니다 특정 구현에 의존하지 않고 동작을 테스트하고 싶을 수 있습니다 Fixture Monkey는 간단한 인터페이스, 제네릭 인터페이스, sealed interface 등 다양한 인터페이스 타입의 테스트 객체를 쉽게 생성할 수 있게 해줍니다.
빠른 시작 예제 # 인터페이스 생성을 시작하기 위한 간단한 예제입니다:</description></item><item><title>인트로스펙터</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/introspector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/introspector/</guid><description>인트로스펙터란 무엇인가요? # Fixture Monkey의 인트로스펙터(Introspector)는 테스트 객체를 생성하는 방법을 결정하는 도구입니다. 테스트 객체를 생성하는 &amp;ldquo;공장&amp;quot;이라고 생각하면 됩니다.
인트로스펙터는 다음과 같은 역할을 합니다:
생성자나 빌더 중 어떤 방식으로 객체를 생성할지 결정 필드 값을 어떻게 설정할지 결정 코드베이스의 다양한 클래스 타입을 어떻게 처리할지 결정 빠른 시작: 대부분의 프로젝트에 권장되는 설정 # Fixture Monkey를 처음 사용하고 빠르게 시작하고 싶다면, 다음과 같은 설정을 사용하세요. 이 설정은 대부분의 프로젝트에서 잘 작동합니다:
// 대부분의 클래스 타입을 처리할 수 있는 권장 설정 FixtureMonkey fixtureMonkey = FixtureMonkey.</description></item><item><title>사용자 정의 인트로스펙터 만들기</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/custom-introspector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/generating-objects/custom-introspector/</guid><description>참고: 이 가이드는 Fixture Monkey 기본 개념을 이해하고 있는 고급 사용자를 위한 것입니다. 대부분의 사용자는 내장 인트로스펙터가 일반적인 시나리오를 처리할 수 있기 때문에 사용자 정의 인트로스펙터를 만들 필요가 없습니다. 처음 시작하는 경우 먼저 인트로스펙터 가이드를 확인하세요.
언제 사용자 정의 인트로스펙터가 필요한가요? # 다음과 같은 특정 상황에서 사용자 정의 인트로스펙터가 필요할 수 있습니다:
클래스에 내장 인트로스펙터로 처리할 수 없는 고유한 생성 요구사항이 있는 경우 비표준적인 패턴을 따르는 타사 라이브러리와 작업하는 경우 객체에 instantiate 메서드로 해결할 수 없는 특별한 초기화 로직이 필요한 경우 이 중 어느 것도 해당하지 않는다면 내장 인트로스펙터로 충분할 것입니다.</description></item></channel></rss>