<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>마이그레이션 가이드 on</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/migration-guide/</link><description>Recent content in 마이그레이션 가이드 on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/migration-guide/index.xml" rel="self" type="application/rss+xml"/><item><title>1.0.x</title><link>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/migration-guide/migration-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-1-0-kor/docs/migration-guide/migration-guide/</guid><description>코틀린 타입 생성 방법 # 1.0.x에서 KotlinPlugin을 추가하면 자바 타입과 코틀린 타입 모두 PrimaryConstructorArbitraryIntrospector 를 사용해서 생성합니다. 코틀린의 primary 생성자를 사용해서 객체를 생성하기 때문에 자바 타입이 들어오면 문제가 발생합니다.
1.1.x부터 KotlinPlugin을 추가하면 자바 타입은 BeanArbitraryIntrospector으로 생성하고 코틀린 타입은 PrimaryConstructorArbitraryIntrospector으로 생성합니다.
자바와 코틀린의 ArbitraryBuilder API 다른 점 # 1.0.x에서는 자바와 코틀린 모두 동일한 ArbitraryBuilder 인터페이스에서 노출하는 API를 사용합니다.
1.1.x부터 픽스쳐 몽키는 자바 특화 ArbitrayBuilder API와 코틀린 특화 ArbitraryBuilder API를 제공합니다. 물론 자바 특화 ArbitraryBuilder API를 사용해도 코틀린 타입을 생성할 수 있습니다.</description></item></channel></rss>