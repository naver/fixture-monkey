<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Customizing Objects on</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/</link><description>Recent content in Customizing Objects on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/index.xml" rel="self" type="application/rss+xml"/><item><title>Fixture Customization APIs</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/apis/</guid><description>Fixture Monkey offers a range of APIs within the ArbitraryBuilder class that enable customization of objects created by it.
Customizing Fixtures # set() # The set() method is used to assign values to one or more properties referenced by the expression.
Different types, including Supplier, Arbitrary, ArbitraryBuilder, NOT_NULL, NULL, or Just can be used as the value. Additionally, a certain instance of an object can also be used as the value.</description></item><item><title>Expressions</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/expressions/</guid><description>When using Fixture Monkey, you have the flexibility to select one or more properties of an object using Fixture Monkey expressions.
Let&amp;rsquo;s consider an example object structure:
@Value public class JavaClass { String field; String[] array; List&amp;lt;String&amp;gt; list; Nested object; List&amp;lt;Nested&amp;gt; objectList; @Value public static class Nested { String nestedField; } } Selecting Properties Using String Expressions # Selecting the root object: # &amp;quot;$&amp;quot; Selecting a specific field: # &amp;quot;field&amp;quot; Selecting a nested field: # &amp;quot;object.</description></item><item><title>Customizing random values with Arbitrary</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/arbitrary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/arbitrary/</guid><description>Jqwik is a Property-Based Testing library for the JVM environment. Fixture Monkey relies on Jqwik&amp;rsquo;s Arbitrary to generate random values for primitive types such as characters, strings, and integers.
In Jqwik, Arbitrary is the core interface used to represent objects that can be generated and shrunk. At times, we might desire our fixture properties to have random values while adhering to certain constraints.
In such scenarios, you can achieve this by customizing properties using Fixture Monkey&amp;rsquo;s set() method and assigning an Arbitrary as the value.</description></item><item><title>InnerSpec</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/innerspec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/innerspec/</guid><description>An InnerSpec is a type-independent specification for the customizations you wish to apply. Using the setInner() method within ArbitraryBuilder, you can apply customizations defined within an InnerSpec instance into your builder.
InnerSpec holds customization details and can be reused on ArbitraryBuilders. Unlike using expressions used in ArbitraryBuilder, InnerSpec enables a more nested and structured approach.
An added advantage of InnerSpec is its ability to customize map properties, unlike normal expressions.</description></item><item><title>Customizing Interface</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/customizing-objects/interface/</guid><description>The ArbitraryBuilder API is also valid within the interface. You can customize the interface properties regardless of the interface type as said in Generating Interface Type The interface type refers to interface, generic interface ,selaed interface.
public interface StringSupplier { String getValue(); } FixtureMonkey fixture = FixtureMonkey.create(); String result = fixture.giveMeBuilder(StringSupplier.class) .set(&amp;quot;value&amp;quot;, &amp;quot;fix&amp;quot;) .sample() .getValue(); The properties of the interface in ArbitraryBuilder differ in the implementation. Unfortunately, there is currently no ArbitraryBuilder API that resolves the implementation of the interface.</description></item></channel></rss>