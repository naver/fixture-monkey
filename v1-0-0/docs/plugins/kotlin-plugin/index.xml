<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin Plugin on</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/plugins/kotlin-plugin/</link><description>Recent content in Kotlin Plugin on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-0-0/docs/plugins/kotlin-plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>Features</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/plugins/kotlin-plugin/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/plugins/kotlin-plugin/features/</guid><description>To help you take full advantage of the concise, safe, and pragmatic nature of Kotlin, Fixture Monkey provides a Kotlin plugin.
Using PrimaryConstructorArbitraryIntrospector as the default introspector to generate Kotlin classes with its primary constructor. Fixture Monkey Extension Functions Kotlin DSL Exp, Kotlin instantiateBy DSL Dependencies # fixture-monkey-kotlin # Gradle # testImplementation(&amp;quot;com.navercorp.fixturemonkey:fixture-monkey-kotlin:1.1.15&amp;quot;) Maven # &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.navercorp.fixturemonkey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fixture-monkey-kotlin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.15&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; fixture-monkey-starter-kotlin # To help you get started using Fixture Monkey in a Kotlin environment, there is also a starter dependency fixture-monkey-starter-kotlin that comes with pre-configured dependencies such as fixture-monkey-starter or fixture-monkey-jakarta-validation.</description></item><item><title>Introspectors for Kotlin</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/plugins/kotlin-plugin/introspectors-for-kotlin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/plugins/kotlin-plugin/introspectors-for-kotlin/</guid><description>Fixture Monkey provides some additional introspectors that support the generation of Kotlin classes.
PrimaryConstructorArbitraryIntrospector # The PrimaryConstructorArbitraryIntrospector becomes the default introspector when the Kotlin plugin is added. It creates a Kotlin class with its primary constructor.
Example Kotlin Class :
data class Product ( val id: Long?, val productName: String, val price: Long, val options: List&amp;lt;String&amp;gt;, val createdAt: Instant ) Using PrimaryConstructorArbitraryIntrospector :
@Test fun test() { val fixtureMonkey = FixtureMonkey.</description></item><item><title>Kotlin DSL Exp</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/plugins/kotlin-plugin/kotlin-exp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/plugins/kotlin-plugin/kotlin-exp/</guid><description>Fixture Monkey utilizes Kotlin&amp;rsquo;s DSL feature to ensure type-safety with expressions. Let&amp;rsquo;s explore how we can employ Kotlin Exp instead of the standard Java String Expression.
Referencing a property # Suppose we have an object structure similar to the one described earlier, written in both Java and Kotlin:
@Value public class JavaClass { String field; List&amp;lt;String&amp;gt; list; Nested nestedObject; List&amp;lt;Nested&amp;gt; nestedObjectList; @Value public static class Nested { String nestedField; } } data class KotlinClass( val field: String, val list: List&amp;lt;String&amp;gt;, val nestedObject: Nested, val nestedObjectList: List&amp;lt;Nested&amp;gt; ) { data class Nested( val nestedField: String ) } To use Kotlin Exp to reference a property, you need to use the Exp or ExpGetter suffix to the normal Fixture Customization APIs.</description></item></channel></rss>