<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Requirements</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/requirements/</guid><description>ðŸ’¡ Fixture Monkey is designed for test environments. It is not recommended for production use. Prerequisites # JDK 1.8 or higher (Or Kotlin 1.8 or higher) JUnit 5 platform jqwik 1.7.3 Dependencies # Dependency Description fixture-monkey Core library fixture-monkey-starter Starter dependency for fixture monkey fixture-monkey-kotlin Kotlin support fixture-monkey-starter-kotlin Starter dependency for fixture monkey kotlin fixture-monkey-starter is a starter dependency that comes with pre-configured dependencies such as fixture-monkey-jakarta-validation to help you get started using Fixture Monkey.</description></item><item><title>Creating test objects</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/creating-test-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/creating-test-objects/</guid><description>Fixture Monkey works in both Java and Kotlin. We have a separate &amp;lsquo;Getting Started&amp;rsquo; page for each environment you can use: Java, Java without Lombok, and Kotlin.
This page explains the Java environment. Please refer to the appropriate page for your environment.
Consider a scenario where you need a test fixture for a Product class, as shown below:
ðŸ’¡ lombok.anyConstructor.addConstructorProperties=true should be added in lombok.config @Value public class Product { long id; String productName; long price; List&amp;lt;String&amp;gt; options; Instant createdAt; ProductType productType; Map&amp;lt;Integer, String&amp;gt; merchantInfo; } (Note that the Lombok annotation @Value is used to make Immutable classes.</description></item><item><title>Creating test objects without Lombok</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/creating-test-objects-without-lombok/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/creating-test-objects-without-lombok/</guid><description>ðŸ’¡ If you're using Lombok in your project, feel free to move on to the next page. Consider a scenario where you need a test fixture for a Product class, as shown below:
public class Product { private long id; private String productName; private long price; private List&amp;lt;String&amp;gt; options; private Instant createdAt; private ProductType productType; private Map&amp;lt;Integer, String&amp;gt; merchantInfo; public Product() { } public void setId(long id) { this.id = id; } public void setProductName(String productName) { this.</description></item><item><title>Adding Bean Validation</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/adding-bean-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/adding-bean-validation/</guid><description>Sometimes, you might want to create a valid test object that adheres to the constraints specified by the Bean Validation annotations on your class.
Fixture Monkey supports constraint annotations from the jakarta.validation.constraints and javax.validation.constraints packages.
To enable this feature, you need to add the fixture-monkey-jakarta-validation dependency (or fixture-monkey-javax-validation if you are using javax.validation.constraints) to your project as follows:
Gradle # testImplementation(&amp;quot;com.navercorp.fixturemonkey:fixture-monkey-jakarta-validation:1.1.12&amp;quot;) Maven # &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.navercorp.fixturemonkey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fixture-monkey-jakarta-validation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.12&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; Fixture Monkey provides additional features as plugins.</description></item><item><title>Customizing objects</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/customizing-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/customizing-objects/</guid><description>Suppose you need to customize your test fixture for a specific unit test. In that case, you can use Fixture Monkey to generate a builder and further customize it.
@Value public class Product { long id; String productName; long price; List&amp;lt;String&amp;gt; options; Instant createdAt; } For example, for a certain test you might need a Product instance with an id of 1,000.
In order to do this, you can get a type builder from fixture monkey with the giveMeBuilder method.</description></item><item><title>Creating objects in Kotlin</title><link>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/creating-objects-in-kotlin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0/docs/get-started/creating-objects-in-kotlin/</guid><description>Fixture Monkey also supports generating classes written in Kotlin code.
In order to do this, first make sure you added the fixture-monkey-starter-kotlin dependency.
Then we can add the Kotlin Plugin, to enable additional features of fixture monkey that support using Kotlin.
@Test fun test() { val fixtureMonkey = FixtureMonkey.builder() .plugin(KotlinPlugin()) .build() } The Kotlin plugin changes the default ObjectIntrospector to PrimaryConstructorArbitraryIntrospector, which generates Kotlin classes with their primary constructor.
Suppose you have a Kotlin class like this:</description></item></channel></rss>