---
description: It is to make an GFI Fixture Monkey github issue
globs: 
alwaysApply: false
---
# Fixture Monkey GFI Issue Creation Guidelines

## Overview
This rule provides guidelines for creating Good First Issue (GFI) issues in the naver/fixture-monkey repository. It helps create well-structured, beginner-friendly issues that follow established patterns and encourage community contribution.

## Example GFI Issue Template

Here's a complete example of a well-structured GFI issue:

---

**Title**: Add DoubleCombinableArbitrary for easy double customization

**Summary**
Add a `DoubleCombinableArbitrary` interface to provide fluent API for customizing double values, similar to existing `StringCombinableArbitrary`.

**Description**
Currently, customizing double values in Fixture Monkey requires verbose `Arbitraries` calls:
```java
// Current approach - verbose and not intuitive
fixtureMonkey.giveMeBuilder(Product.class)
    .set("price", Arbitraries.doubles().between(10.0, 1000.0).greaterThan(0))
```

Following the successful pattern established in PR #1179 (StringCombinableArbitrary), we should add a `DoubleCombinableArbitrary` interface that provides:
- `positive()` - generates positive doubles
- `negative()` - generates negative doubles  
- `between(min, max)` - generates doubles within range
- `greaterThan(value)` - generates doubles greater than value
- `lessThan(value)` - generates doubles less than value

**Expected Usage**
```java
// After implementation - clean and intuitive
fixtureMonkey.giveMeBuilder(Product.class)
    .set("price", CombinableArbitrary.doubles().positive().between(10.0, 1000.0))
    .set("discount", CombinableArbitrary.doubles().between(0.0, 1.0))
```

**Implementation Hints**
1. Study `StringCombinableArbitrary` interface and implementation
2. Create `DoubleCombinableArbitrary` interface with double-specific methods
3. Implement `DoubleCombinableArbitraryDelegator` for filtering operations
4. Add factory method in `CombinableArbitrary` class
5. Add ServiceLoader configuration and tests

**Files to Reference**
- `fixture-monkey-api/src/main/java/com/navercorp/fixturemonkey/api/arbitrary/StringCombinableArbitrary.java`
- `fixture-monkey/src/main/java/com/navercorp/fixturemonkey/arbitrary/StringCombinableArbitraryDelegator.java`
- `fixture-monkey-api/src/main/java/com/navercorp/fixturemonkey/api/arbitrary/CombinableArbitrary.java`

**Good First Issue Because**
This is perfect for beginners because it follows an established pattern with clear examples. You'll learn about Fixture Monkey's architecture while implementing a useful feature that many users will benefit from.

**If you're interested**
1. Comment below to let us know you'd like to work on this
2. Study the referenced files to understand the pattern
3. Ask questions if anything is unclear - we're here to help! ðŸš€

---

## GFI Issue Structure Guidelines

### Title Format
- Use clear, action-oriented titles: "Add [Feature] for [Purpose]"
- Keep it concise and specific to the feature being implemented
- Examples:
  - "Add DoubleCombinableArbitrary for easy double customization"
  - "Add validation support for @Email annotation"
  - "Add Kotlin extension functions for ArbitraryBuilder"

### Required Sections

#### 1. Summary
- One sentence describing what needs to be added
- Reference existing similar functionality when applicable
- Keep it simple and clear
- Focus on the value proposition

#### 2. Description
- Explain current limitations or pain points
- Reference successful precedents when available
- List 3-5 key features/methods to implement
- Use bullet points for clarity
- Show the problem this solves

#### 3. Expected Usage
- Provide before/after code examples
- Show 2-3 realistic usage scenarios
- Use simple, understandable examples
- Demonstrate the improvement in developer experience

#### 4. Implementation Hints
- List 5 high-level steps
- Reference specific files to look at
- Don't provide detailed implementation
- Focus on pattern-following approach
- Guide without micromanaging

#### 5. Files to Reference
- List key files that show similar patterns
- Include both interface and implementation examples
- Mention test files for reference
- Help contributors understand the codebase structure

#### 6. Good First Issue Because
- Explain why it's suitable for beginners
- Emphasize pattern-following nature
- Mention available examples and support
- Highlight learning opportunities

#### 7. If you're interested
- Simple 3-step process for contributors
- Encourage questions and engagement
- Create welcoming atmosphere
- Provide clear next steps

## Key Principles for GFI Issues

### Simplicity
- Avoid overwhelming technical details
- Focus on pattern-following rather than innovation
- Provide clear direction without micromanaging
- Break complex features into smaller, manageable pieces

### Clarity
- Use consistent terminology throughout
- Provide concrete, runnable examples
- Reference existing successful implementations
- Explain the "why" behind the feature

### Accessibility
- Assume basic Java/Kotlin knowledge only
- Explain architectural concepts briefly
- Encourage questions and learning
- Provide multiple entry points for understanding

### Scope Management
- Focus on single feature implementation
- Avoid complex cross-cutting concerns
- Keep the scope well-defined and achievable
- Ensure the issue can be completed in reasonable time

## Common Patterns to Reference

### API Enhancement Patterns
When creating issues for new API features:
1. Always reference similar existing functionality
2. Identify type-specific or domain-specific methods
3. Follow established naming conventions
4. Include both interface and implementation
5. Add comprehensive test coverage

### Plugin Development Patterns
For plugin-related issues:
1. Reference existing plugin implementations
2. Identify integration points clearly
3. Specify configuration requirements
4. Include both positive and negative test cases
5. Document plugin lifecycle considerations

### Documentation Patterns
For documentation improvements:
1. Identify gaps in current documentation
2. Reference well-documented similar features
3. Specify target audience clearly
4. Include code examples and use cases
5. Consider multiple learning styles

## Labels and Metadata
- Always include: `enhancement`, `good first issue`
- Add relevant domain labels: `api`, `plugin`, `documentation`, etc.
- Consider difficulty labels: `beginner-friendly`, `intermediate`
- Don't assign to specific milestones initially
- Let maintainers handle assignee decisions

## Common Pitfalls to Avoid
- Don't provide too much implementation detail
- Don't assume advanced knowledge of the codebase
- Don't create issues that are too broad or too narrow
- Don't forget to reference successful precedents
- Don't skip the "why this is good for beginners" explanation
- Don't make the scope too ambitious for a first contribution

## Quality Checklist
- [ ] Title is clear and action-oriented
- [ ] References existing patterns when applicable
- [ ] Provides concrete usage examples
- [ ] Lists implementation hints without being prescriptive
- [ ] Explains why it's suitable for beginners
- [ ] Includes proper labels
- [ ] Encourages contributor engagement
- [ ] Maintains appropriate scope for a first contribution
- [ ] Shows clear value proposition
- [ ] Provides multiple reference points for learning

## Creating Your GFI Issue

### Step 1: Identify the Opportunity
- Look for repetitive patterns in the codebase
- Find areas where developer experience could be improved
- Identify missing features that follow existing patterns
- Consider community feedback and feature requests

### Step 2: Research Existing Patterns
- Find similar implementations in the codebase
- Study the architecture and naming conventions
- Understand the testing patterns
- Identify integration points

### Step 3: Draft the Issue
- Start with the example template above
- Customize for your specific feature
- Focus on the developer experience improvement
- Keep the scope manageable

### Step 4: Review and Refine
- Check against the quality checklist
- Ensure examples are clear and runnable
- Verify the scope is appropriate for beginners
- Add encouraging and welcoming language

Remember: The goal is to create issues that are both valuable to the project and achievable for newcomers. Focus on clear communication, helpful examples, and supportive guidance.