import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id "org.ec4j.editorconfig" version "0.0.3"
    id "com.github.spotbugs" version "4.7.6"
    id "jacoco"
    id "checkstyle"
    id "org.gradle.test-retry" version "1.5.2"
}

dependencies {
    api(project(":fixture-monkey-api"))
    api("net.jqwik:jqwik-web:${JQWIK_VERSION}")
    api("net.jqwik:jqwik-time:${JQWIK_VERSION}")
    api("com.github.mifmif:generex:1.0.2")

    testRuntimeOnly(project(":fixture-monkey-engine"))
    testImplementation(project(":fixture-monkey"))
    testImplementation("org.hibernate.validator:hibernate-validator:7.0.5.Final")
    testImplementation("org.glassfish:jakarta.el:4.0.2")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${JUNIT_JUPITER_VERSION}")
    testImplementation("org.junit.platform:junit-platform-engine:${JUNIT_ENGINE_VERSION}")
    testImplementation("org.assertj:assertj-core:3.22.0")
    testImplementation("org.projectlombok:lombok:1.18.24")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.24")
}

editorconfig {
    excludes = ["build"]
}

test {
    useJUnitPlatform {
        includeEngines "jqwik"
    }

    retry {
        maxRetries = 2
        maxFailures = 20
        failOnPassedAfterRetry = true
    }
}

check.dependsOn editorconfigCheck

checkstyle {
    configFile = file("${project.rootDir}/tool/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "${project.rootDir}/tool/naver-checkstyle-suppressions.xml"]
    toolVersion = "8.45.1"
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
}

spotbugs {
    ignoreFailures = false
    reportLevel = "high"
    spotbugsTest.enabled = false
}

tasks.withType(SpotBugsTask) {
    reports {
        text.enabled = false
        xml.enabled = true
        html.enabled = false
    }
}

tasks.register("printSpotbugsMain") {
    doLast {
        File mainResult = file("${buildDir}/reports/spotbugs/main.text")
        if (mainResult.exists()) {
            mainResult.readLines().forEach {
                println(it)
            }
        }
    }
}
tasks.getByPath("spotbugsMain").finalizedBy("printSpotbugsMain")

jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(file("${buildDir}/classes/java/main"))
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/jacoco.xml")
        csv.enabled false
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(file("${buildDir}/classes/main"))
    }

    violationRules {
        rule {
            limit {
                counter = "LINE"
                // minimum = 0.3
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification


jar {
    manifest {
        attributes(
                "Specification-Title": artifactName,
                "Specification-Version": project.version,
                "Specification-Vendor": "com.navercorp",
                "Implementation-Title": artifactName,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "com.navercorp"
        )
    }
}
