<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>옵션 on</title><link>https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/</link><description>Recent content in 옵션 on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/index.xml" rel="self" type="application/rss+xml"/><item><title>컨셉</title><link>https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/concepts/</guid><description>Fixture Monkey가 제공하는 옵션에 대해 배우기 전에 몇 가지 알아둬야 할 사항이 있습니다.
프로퍼티 # 문서에서는 클래스 객체의 특성을 나타낼 때, 필드 대신에 일관적으로 프로퍼티 라는 용어를 사용합니다. 이 용어는 Kotlin의 &amp;lsquo;프로퍼티&amp;rsquo;와 동일한 이름이지만, Fixture Monkey에서는 컨셉이 다릅니다.
Fixture Monkey의 초기 구조는 주로 필드에 기반하고 있었으며, 이는 메서드와 기타 메커니즘을 통한 구성 및 제어에 제약을 가했습니다. 예를 들어, 오직 필드에만 의존할 경우 Setter 메서드에 존재하는 어노테이션에 접근할 수 없습니다. 이러한 한계점을 다루기 위해 필드를 넘어 지원을 확장하는 프로퍼티 인터페이스가 도입되었습니다.</description></item><item><title>생성 옵션</title><link>https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/generation-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/generation-options/</guid><description>Fixture Monkey는 원하는 설정과 일치하는 복잡한 객체를 생성하기 위한 다양한 옵션을 제공합니다.
이러한 옵션은 FixtureMonkeyBuilder 를 통해 접근할 수 있습니다.
사용자 정의 객체 생성기 등록하기 # ObjectIntrospector # objectIntrospector
ObjectIntrospector 은 Fixture Monkey에서 객체가 생성되는 방법을 결정합니다. objectIntrospector 옵션을 사용하면 객체 생성의 기본 동작을 지정할 수 있습니다. introspector section에서 언급한 대로 기본 introspector를 변경하여 Fixture Monkey에서 제공하는 미리 정의된 introspector를 사용하거나 사용자 정의 introspector를 만들 수 있습니다.
📖 참고할 구현체: 'BeanArbitraryIntrospector', 'BuilderArbitraryIntrospector' ArbitraryIntrospector # pushArbitraryIntrospector, pushAssignableTypeArbitraryIntrospector, pushExactTypeArbitraryIntrospector</description></item><item><title>기타 옵션</title><link>https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/other-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/other-options/</guid><description>이 섹션에서는 FixtureMonkeyBuilder 가 제공하는 몇 가지 추가 옵션을 설명합니다.
플로그인 추가하기 # Fixture Monkey는 플러그인을 통한 서드파티 라이브러리 지원 등 몇 가지 추가 기능을 제공합니다. 플러그인 옵션을 사용하여 이 추가 기능을 사용할 수 있습니다.
예시로 아래와 같이 Jackson 플러그인을 추가할 수 있습니다. 이렇게 하면 JacksonObjectArbitraryIntrospector 그리고 Jackson 어노테이션 지원과 같은 Jackson의 기능을 사용할 수 있습니다.
Java Kotlin FixtureMonkey fixtureMonkey = FixtureMonkey.builder() .plugin(new JacksonPlugin()) .build(); val fixtureMonkey = FixtureMonkey.builder() .plugin(JacksonPlugin()) .</description></item><item><title>커스터마이징 옵션</title><link>https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/customization-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v1-0-0-kor/docs/fixture-monkey-options/customization-options/</guid><description>Fixture Monkey는 FixtureMonkeyBuilder 를 통해 원하는 값을 가지도록 객체를 사용자 정의하거나 사용자 정의 프로퍼티 명을 사용할 수 있는 옵션도 제공합니다.
프로퍼티명 참조 방법 변경하기 # defaultPropertyNameResolver, pushPropertyNameResolver, pushAssignableTypePropertyNameResolver, pushExactTypePropertyNameResolver
PropertyNameResolver 관련 옵션을 사용하면 프로퍼티명을 참조하는 방법을 사용자 정의할 수 있습니다.
defaultPropertyNameResolver 옵션은 모든 타입에 대해 프로퍼티명을 알아내는 방식을 변경하는 데 사용됩니다. 만약 특정 타입에 대해 변경을 수행하려면 pushPropertyNameResolver , pushAssignableTypePropertyNameResolver 또는 pushExactTypePropertyNameResolver 를 사용할 수 있습니다.
기본적으로 프로퍼티는 원래 이름으로 참조됩니다.</description></item></channel></rss>