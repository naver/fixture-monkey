<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Practices on</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/</link><description>Recent content in Practices on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Apply JSR380: Bean Validation 2.0 annotations</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/javaxvalidation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/javaxvalidation/</guid><description> This practice should add extra module because it depends on third-party library javax.validation Creating an instance validated by JSR380: Bean Validation 2.0 annotations
1. Adding dependency # testImplementation(&amp;quot;com.navercorp.fixturemonkey:fixture-monkey-javax-validation:1.1.12&amp;quot;) &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.navercorp.fixturemonkey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fixture-monkey-javax-validation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.12&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 2. Adding plugin option # FixtureMonkey fixtureMonkey = FixtureMonkey.builder() .plugin(new JavaxValidationPlugin()) .build();</description></item><item><title>Altering Java class default value</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/javadefaultvalue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/javadefaultvalue/</guid><description>1. Implementing JavaTypeArbitraryGenerator interface # Override specific type method to redefine default value
public class CustomJavaTypeArbitraryGenerator implements JavaTypeArbitraryGenerator{ @Override public StringArbitrary strings(){ ... } } 2. Altering javaTypeArbitraryGenerator option # FixtureMonkey fixtureMonkey = FixtureMonkey.builder() .plugin(new JavaxValidationPlugin()) .javaTypeArbitraryGenerator(new CustomJavaTypeArbitraryGenerator()) .build();</description></item><item><title>Adding Java class custom annotations</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/customannotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/customannotation/</guid><description>1. Implementing JavaArbitraryResolver interface # Override specific type method to define how annotation works
public class CustomJavaArbitraryResolver implements JavaArbitraryResolver{ @Override public Arbitrary&amp;lt;String&amp;gt; strings(StringArbitrary stringArbitrary, ArbitraryGeneratorContext context) { ... } } Concrete Class # JavaxValidationJavaArbitraryResolver 2. Altering javaArbitraryResolver option # FixtureMonkey fixtureMonkey = FixtureMonkey.builder() .plugin(new JavaxValidationPlugin()) .javaArbitraryResolver(new CustomJavaArbitraryResolver()) .build();</description></item><item><title>Altering the way of instantiating</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/objectgenerator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/objectgenerator/</guid><description>1. Altering instantiating # BeanArbitraryIntrospector # Preconditions # No args constructor Setter FieldReflectionArbitraryIntrospector # Preconditions # No args constructor BuilderArbitraryIntrospector # Preconditions # Builder ConstructorPropertiesIntrospector # Preconditions # Should satisfy one of below preconditions
record type lombok @Value, enabled lombok.anyConstructor.addConstructorProperties=true option any constructors with @ConstructorProperties Multiple constructors with record would be instantiated by constructor with @ConstructorProperties FactoryMethodArbitraryIntrospector # Preconditions # static factory method PrimaryConstructorArbitraryIntrospector # Preconditions # Kotlin class Primary constructor.</description></item><item><title>Setting field value</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/fieldset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/fieldset/</guid><description>This practice deals with manipulation set 0. Class # public class Generate { String value; List&amp;lt;String&amp;gt; values; } 1. Generating ArbitraryBuilder # ArbitraryBuilder&amp;lt;Generate&amp;gt; generateBuilder = fixtureMonkey.giveMeBuilder(Generate.class); 2. Setting value # Setting field # general expression Kotlin Exp generateBuilder.set(&amp;#34;value&amp;#34;, &amp;#34;test&amp;#34;); generateBuilder.setExp(Generate::value, &amp;#34;test&amp;#34;); Setting field n-th element # general expression Kotlin Exp generateBuilder.set(&amp;#34;values[n]&amp;#34;, &amp;#34;test&amp;#34;); generateBuilder.setExp(Generate::values[n], &amp;#34;test&amp;#34;); Setting field all elements # general expression Kotlin Exp generateBuilder.set(&amp;#34;values[*]&amp;#34;, &amp;#34;test&amp;#34;); generateBuilder.setExp(Generate::values[&amp;#34;*&amp;#34;], &amp;#34;test&amp;#34;); Setting field to arbitrary value # general expression Kotlin Exp generateBuilder.</description></item><item><title>Setting Map</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/mapset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/mapset/</guid><description>This practice deals with manipulation setInner 0. Class # public class Generate { Map&amp;lt;String, String&amp;gt; namesById; } 1. Generating ArbitraryBuilder # ArbitraryBuilder&amp;lt;Generate&amp;gt; generateBuilder = fixtureMonkey.giveMeBuilder(Generate.class); 2. Altering map size # Setting map without size would result in no change.
Please check out if using size before setting value
general expression Kotlin Exp generateBuilder.setInner( InnerSpec().property(&amp;#34;namesById&amp;#34;, m -&amp;gt; m.size(5)) ); generateBuilder.setInner( InnerSpec().property(&amp;#34;namesById&amp;#34;) { m -&amp;gt; m.size(5) } ) 3. Setting field # Setting entry # general expression Kotlin Exp generateBuilder.</description></item><item><title>Setting Nested Map</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/nestedmapset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/nestedmapset/</guid><description>This practice deals with manipulation setInner 0. Class # It works even if key is map type or value is map type.
public class Generate { Map&amp;lt;Map&amp;lt;String, String&amp;gt;, String&amp;gt; mapByString; Map&amp;lt;String, Map&amp;lt;String, String&amp;gt;&amp;gt; stringByMap; } Setting nested map key # general expression Kotlin Exp generateBuilder.setInner( InnerSpec().property(&amp;#34;mapByString&amp;#34;, m -&amp;gt; m.key(k -&amp;gt; k.entry(&amp;#34;key&amp;#34;, &amp;#34;value&amp;#34;))) ); generateBuilder.setInner( InnerSpec().property(&amp;#34;mapByString&amp;#34;) { m -&amp;gt; m.key { k -&amp;gt; k.entry(&amp;#34;key&amp;#34;, &amp;#34;value&amp;#34;) } } ); If setting value given key, check out entry just as shown below</description></item><item><title>Altering Container Size</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/containersize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/containersize/</guid><description>In Fixture Monkey Container means data structures including Collection. ex. Map, Optional, Set, List&amp;hellip;
user-defined data structures are also considered as a Container
This practice deals with manipulation size. 0. Class # public class Generate { List&amp;lt;GenerateElement&amp;gt; values; } public class GenerateElement { List&amp;lt;String&amp;gt; values; } 1. Generating ArbitraryBuilder # ArbitraryBuilder&amp;lt;Generate&amp;gt; generateBuilder = fixtureMonkey.giveMeBuilder(Generate.class); 2-1. Alter field size # general expression Kotlin Exp generateBuilder.size(&amp;#34;values&amp;#34;, 5); generateBuilder.sizeExp(Generate::values, 5); 2-2. Alter field n-th element size # general expression Kotlin Exp generateBuilder.</description></item><item><title>registering default ArbitraryBuilder</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/register/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/register/</guid><description>Registered ArbitraryBuilder would be used as default ArbitraryBuilder 0. Class # public class GenerateString { String value; } public class GenerateInt { int value; } 1. Register one type # FixtureMonkey fixtureMonkey=FixtureMonkey.builder() .register( GenerateString.class, fixture -&amp;gt; fixture.giveMeBuilder(GenerateString.class) .set(&amp;quot;value&amp;quot;, Arbitraries.strings().alpha()) ) .build(); 2. Register multiple types # register # FixtureMonkey fixtureMonkey = FixtureMonkey.builder() .register( GenerateString.class, fixture -&amp;gt; fixture.giveMeBuilder(GenerateString.class) .set(&amp;quot;value&amp;quot;, Arbitraries.strings().alpha()) ) .register( GenerateInt.class, fixture -&amp;gt; fixture.giveMeBuilder(GenerateInt.class) .set(&amp;quot;value&amp;quot;, Arbitraries.integers().between(1, 100)) ) .</description></item><item><title>Add new container</title><link>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/newcontainer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naver.github.io/fixture-monkey/v0-6-0/docs/examples/newcontainer/</guid><description>Example Class # public class Pair&amp;lt;S, T&amp;gt; { private final S first; private final T second; public Pair(S first, T second) { this.first = first; this.second = second; } public S getFirst() { return first; } public T getSecond() { return second; } } 1. Implementing ArbitraryIntrospector, Matcher interface # public class PairIntrospector implements ArbitraryIntrospector, Matcher { private static final Matcher MATCHER = new AssignableTypeMatcher(Pair.class); @Override public boolean match(Property property) { return MATCHER.</description></item></channel></rss>