/*
 * Fixture Monkey
 *
 * Copyright (c) 2021-present NAVER Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.navercorp.fixturemonkey.api.arbitrary;

import java.util.Map;

import org.apiguardian.api.API;
import org.apiguardian.api.API.Status;

/**
 * It would generate a unique value.
 * The class of object generated by {@code CombinableArbitrary} should override {@code equals} and {@code hashCode}.
 */
@API(since = "0.6.0", status = Status.EXPERIMENTAL)
final class UniqueCombinableArbitrary<T> implements CombinableArbitrary<T> {
	private static final Object EXISTED = new Object();

	private final CombinableArbitrary<T> combinableArbitrary;
	private final Map<Object, Object> generated;

	UniqueCombinableArbitrary(CombinableArbitrary<T> combinableArbitrary, Map<Object, Object> generated) {
		this.combinableArbitrary = combinableArbitrary;
		this.generated = generated;
	}

	@Override
	public T combined() {
		return combinableArbitrary.filter(
			it -> {
				if (!generated.containsKey(it)) {
					generated.put(it, EXISTED);
					return true;
				}
				return false;
			}
		).combined();
	}

	@Override
	public Object rawValue() {
		return combinableArbitrary.filter(
			it -> {
				if (!generated.containsKey(it)) {
					generated.put(it, EXISTED);
					return true;
				}
				return false;
			}
		).rawValue();
	}

	@Override
	public void clear() {
		combinableArbitrary.clear();
	}

	@Override
	public boolean fixed() {
		return combinableArbitrary.fixed();
	}
}
