/*
 * Fixture Monkey
 *
 * Copyright (c) 2021-present NAVER Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.navercorp.fixturemonkey.api.property;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apiguardian.api.API;
import org.apiguardian.api.API.Status;

/**
 * Combines two different type properties into a single {@link CompositeProperty}.
 * A single type property would not be converted to {@link CompositeProperty}.
 * <p>
 * The order of {@code propertyGenerators} would be preserved.
 * the property generated by first {@link PropertyGenerator} would be the primary property of {@link CompositeProperty}.
 * The property generated by second {@link PropertyGenerator} would be the secondary property.
 * <p>
 * For example,
 * {@code propertyGenerators = List.of(FieldPropertyGenerator, JavaBeansPropertyGenerator);}
 * <p>
 * The primary property of generated {@link CompositeProperty} would be {@link FieldProperty}.
 * The secondary property would be {@link PropertyDescriptorProperty}.
 */
@API(since = "0.5.3", status = Status.MAINTAINED)
public final class CompositePropertyGenerator implements PropertyGenerator {
	private final List<PropertyGenerator> propertyGenerators;

	public CompositePropertyGenerator(List<PropertyGenerator> propertyGenerators) {
		this.propertyGenerators = propertyGenerators;
	}

	public List<Property> generateChildProperties(Property property) {
		Map<String, List<Property>> propertyListsByPropertyName = new HashMap<>();

		for (PropertyGenerator propertyGenerator : propertyGenerators) {
			List<Property> generatedProperties = propertyGenerator.generateChildProperties(property)
				.stream()
				.filter(it -> it.getName() != null)
				.collect(Collectors.toList());

			for (Property generatedProperty : generatedProperties) {
				List<Property> properties =
					propertyListsByPropertyName.computeIfAbsent(generatedProperty.getName(), name -> new ArrayList<>());

				properties.add(generatedProperty);
			}
		}

		return Collections.unmodifiableList(
			propertyListsByPropertyName.values().stream()
				.map(properties -> {
					if (properties.size() == 1) {
						return properties.get(0);
					} else {
						return new CompositeProperty(properties.get(0), properties.get(1));
					}
				})
				.collect(Collectors.toList())
		);
	}
}
